{"file":"utils-007b714b.js","mappings":"SAAgB,MAAM,CAAC,KAAa,EAAE,MAAc,EAAE,IAAY;EAC9D,OAAO,CAAC,KAAK,IAAI,EAAE,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;AACnF,CAAC;AAED;MACa,WAAW,GAAG,OACvB,SAAiB,EACjB,KAAa,EACb,WAAmB,uBAAuB,EAC1C,OAAgB;EAEjB,MAAM,GAAG,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,QAAQ,yBAAyB,SAAS,SAAS,CAAC;EAEtF,OAAO,KAAK,CAAC,GAAG,GAAG,QAAQ,GAAG,IAAI,eAAe,CAAC;IAChD,KAAK,EAAE,KAAK;IACZ,MAAM,EAAE,MAAM;GACf,CAAC,CAAC,QAAQ,EAAE,EAAE;IACX,MAAM,EAAE,KAAK;GAChB,CAAC,CAAC;AACP,EAAE;MAEW,cAAc,GAAG,OAC1B,SAAiB,EACjB,KAAa,EACb,WAAmB,uBAAuB,EAC1C,OAAgB;EAEjB,MAAM,GAAG,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,QAAQ,yBAAyB,SAAS,SAAS,CAAC;EAEtF,OAAO,KAAK,CAAC,GAAG,GAAG,eAAe,GAAG,IAAI,eAAe,CAAC;IACvD,KAAK,EAAE,KAAK;IACZ,MAAM,EAAE,MAAM;GACf,CAAC,CAAC,QAAQ,EAAE,EAAE;IACX,MAAM,EAAE,KAAK;GAChB,CAAC,CAAC;AACP,EAAE;MAEW,iBAAiB,GAAG,OAC7B,SAAiB,EACjB,KAAa,EACb,WAAmB,uBAAuB,EAC1C,OAAgB;EAElB,MAAM,GAAG,GAAG,OAAO,GAAG,OAAO,GAAG,GAAG,QAAQ,yBAAyB,SAAS,SAAS,CAAC;EAEvF,OAAO,KAAK,CAAC,GAAG,GAAG,cAAc,GAAG,IAAI,eAAe,CAAC;IACtD,KAAK,EAAE,KAAK;GACb,CAAC,CAAC,QAAQ,EAAE,EAAE;IACT,MAAM,EAAE,KAAK;GAChB,CAAC,CAAC;AACP,EAAE;MAEW,YAAY,GAAG,CAAC,MAAc,EAAE,GAAW;EACpD,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;AACrD;;;;","names":[],"sources":["./src/utils/utils.ts"],"sourcesContent":["export function format(first: string, middle: string, last: string): string {\n    return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');\n}\n\n//TODO: introduce type of result\nexport const sparqlQuery = async (\n    namespace: string,\n    query: string,\n    endpoint: string = 'http://localhost:9999',\n    fullUrl?: string\n): Promise<any> => {\n   const url = fullUrl ? fullUrl : `${endpoint}/blazegraph/namespace/${namespace}/sparql`;\n\n    return fetch(url + 'query?' + new URLSearchParams({\n      query: query,\n      format: 'json',\n    }).toString(), {\n        method: 'GET',\n    });\n};\n\nexport const sparqlAskQuery = async (\n    namespace: string,\n    query: string,\n    endpoint: string = 'http://localhost:9999',\n    fullUrl?: string\n): Promise<any> => {\n   const url = fullUrl ? fullUrl : `${endpoint}/blazegraph/namespace/${namespace}/sparql`;\n\n    return fetch(url + 'queryBoolean?' + new URLSearchParams({\n      query: query,\n      format: 'json',\n    }).toString(), {\n        method: 'GET',\n    });\n};\n\nexport const sparqlUpdateQuery = async (\n    namespace: string,\n    query: string,\n    endpoint: string = 'http://localhost:9999',\n    fullUrl?: string\n): Promise<any> => {\n  const url = fullUrl ? fullUrl : `${endpoint}/blazegraph/namespace/${namespace}/sparql`;\n\n  return fetch(url + 'queryUpdate?' + new URLSearchParams({\n    query: query,\n  }).toString(), {\n        method: 'GET',\n    });\n};\n\nexport const removePrefix = (prefix: string, str: string): string => {\n    return str.replace(new RegExp(`^${prefix}`), '');\n};\n"],"version":3}